package com.mdtlabs.coreplatform.common.exception;

import lombok.Builder;

import java.util.Objects;

/**
 * <p>
 * This class is used to handle error message.
 * </p>
 * 
 * @author Vigneshkumar Created on 30 Jun 2022
 */
@Builder
public class ErrorMessage {

    private final long dateTime;
    private final Boolean status;
    private final Integer errorCode;
    private final String message;
    private final String exception;

    /**
     * <p>
     * Constructs an ErrorMessage object with the given dateTime, status, errorCode, message,
     * and exception. Initializes the corresponding fields of the ErrorMessage object with the values
     * passed in as arguments. The final keyword indicates that the values cannot be changed later.
     * </p>
     * 
     * @param dateTime The date and time the error message was generated.
     * @param status The HTTP status code associated with the error.
     * @param errorCode The error code associated with the error.
     * @param message The error message.
     * @param exception The exception that caused the error, if any.
     */
    public ErrorMessage(final long dateTime, final Boolean status, final Integer errorCode, final String message,
                        final String exception) {
        this.dateTime = dateTime;
        this.status = status;
        this.errorCode = errorCode;
        this.message = message;
        this.exception = exception;
    }

    /**
     * <p>
     * The function returns a Boolean value representing the status.
     * </p>
     * 
     * @return A Boolean value is being returned.
     */
    public Boolean getStatus() {
        return status;
    }

    /**
     * <p>
     * The function returns an Integer representing an error code.
     * </p>
     * 
     * @return An Integer object is being returned. The value of this object is determined by the value
     * of the variable `errorCode`.
     */
    public Integer getErrorCode() {
        return errorCode;
    }

    /**
     * <p>
     * The function returns a message as a string.
     * </p>
     * 
     * @return The method `getMessage()` is returning a `String` value. The specific `String` value
     * being returned is the value of the `message` variable.
     */
    public String getMessage() {
        return message;
    }

    /**
     * <p>
     * This function returns a string representing an exception.
     * </p>
     * 
     * @return The method is returning a String variable named "exception".
     */
    public String getException() {
        return exception;
    }

    /**
     * <p>
     * The function returns a long value representing a date and time.
     * </p>
     * 
     * @return The method `getDateTime()` is returning a `long` value, which is the value of the
     * variable `dateTime`.
     */
    public long getDateTime() {
        return dateTime;
    }

   /**
    * <p>
    * This is an implementation of the equals method that checks if two ErrorMessage objects are equal
    * based on their status, error code, message, and exception.
    * </p>
    * 
    * @param o The object to be compared for equality with the current object.
    * @return The method is returning a boolean value, either `true` or `false`.
    */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return Boolean.TRUE;
        }
        if (o instanceof final ErrorMessage error) {
            return Objects.equals(getStatus(), error.getStatus()) && getErrorCode().equals(error.getErrorCode())
                    && Objects.equals(getMessage(), error.getMessage()) && Objects.equals(getException(), error.getException());
        }

        return Boolean.FALSE;
    }


    /**
     * <p>
     * This function returns the hash code of an object based on its date time, status, error code,
     * message, and exception.
     * </p>
     * 
     * @return The `hashCode()` method is returning an integer value that is generated by calling the
     * `Objects.hash()` method 
     */
    @Override
    public int hashCode() {
        return Objects.hash(getDateTime(), getStatus(), getErrorCode(), getMessage(), getException());
    }

    /**
     * <p>
     * The toString() function returns the status of an object as a string.
     * </p>
     * 
     * @return The `toString()` method is returning a string representation of the `getStatus()`
     * method's value. The `String.valueOf()` method is used to convert the value to a string.
     */
    @Override
    public String toString() {
        return String.valueOf(getStatus());
    }

}
